name: Deploy Infrastructure

on:
  workflow_dispatch:

jobs:
  deploy-infra:
    runs-on: [self-hosted]
    # runs-on: ubuntu-latest #change to self-hosted when using runner runs-on: [self-hosted, bankingKuber]
    permissions:
      id-token: write
      contents: read
    env:
      AWS_ACCOUNT_ID: 961477247679
      AWS_REGION: eu-central-1
      EKS_CLUSTER_NAME: Banking-Kube-Sloth
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

           # Step 2: Debug OIDC Setup
      - name: Debug OIDC Setup
        run: |
          echo "Debugging OIDC setup..."
          echo "GitHub Repository: ${{ github.repository }}"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub Workflow: ${{ github.workflow }}"
          echo "GitHub Run ID: ${{ github.run_id }}"
          echo "OIDC permissions are enabled with id-token: write."

      # - name: Configure AWS Credentials
      #   id: configure-aws-credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/ci-cd-role
      #     aws-region: eu-central-1

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Print working directory
        run: pwd

      - name: Initialize Terraform
        working-directory: EKS_infra
        run: terraform init
      
      # - name: state import
      #   working-directory: EKS_infra
      #   run: |
      #     terraform import -var-file="envs/terraform_dev.tfvars" aws_iam_role.ci_cd_role ci-cd-role
      #     terraform import -var-file="envs/terraform_dev.tfvars" aws_iam_policy.ci_cd_custom_policy arn:aws:iam::961477247679:policy/ci-cd-custom-policy
      #     terraform import -var-file="envs/terraform_dev.tfvars" aws_iam_openid_connect_provider.github arn:aws:iam::961477247679:oidc-provider/token.actions.githubusercontent.com
      - name: Plan Terraform
        working-directory: EKS_infra
        run: terraform plan -var-file="envs/terraform_dev.tfvars"
#temp off
      - name: Apply Terraform
        working-directory: EKS_infra
        run: terraform apply -auto-approve -var-file="envs/terraform_dev.tfvars"
      
      # - name: Update Kubeconfig
      #   run: |
      #     mkdir -p ~/.kube
      #     aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      # - name: Verify kubectl Access
      #   run: |
      #     kubectl get nodes
      